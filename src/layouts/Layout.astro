---
import "@fontsource/space-mono";
import "@fontsource-variable/orbitron";

interface Props {
	title: string;
}

const { title } = Astro.props;

// Number of stars you want to add
const numStars = 100;

// Function to generate a random star
function generateStar() {
	// Generate a random position for the star
	const x = Math.random() * 545.39;
	const y = Math.random() * 300;

	// Generate a random radius for the star
	const r = Math.random() * 1.5;

	// Generate a random animation delay for the star
	const delay = Math.random() * 6;

	return { x, y, r, delay };
}

// Generate an array of stars
const stars = Array.from({ length: numStars }, generateStar);
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body class="bg-gradient-to-t from-gray-900 to-slate-600">
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 545.39 300" class="bg">
			<defs>
				<style>
					.stars-bg__star {
						fill: white;
					}
				</style>
			</defs>
			<title>Stars-bg</title>
			{
				stars.map((star) => (
					<circle
						class="stars-bg__star"
						style={`animation-delay: ${star.delay}s`}
						cx={star.x}
						cy={star.y}
						r={star.r}
					/>
				))
			}
		</svg>
		<slot />
	</body>
</html>
<style is:global>
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}
	html {
		font-family: system-ui, sans-serif;
		background: #13151a;
		background-size: 224px;
	}
	body {
		margin: 0;
		padding: 0;
		display: flex;
		justify-content: center;
		align-items: center;
		min-height: 100vh;
	}
	h1,
	h2,
	h3,
	h4,
	h5,
	h6 {
		font-family: "Orbitron Variable", sans-serif;
		color: white;
		text-align: center;
	}

	h1 {
		font-size: 3.5rem;
	}
	h2 {
		font-size: 2.8rem;
	}
	h3 {
		font-size: 2.2rem;
	}

	p {
		font-size: 1.2rem;
	}

	/* breakpoints */
	@media (max-width: 600px) {
		h1 {
			font-size: 3rem;
		}
		h2 {
			font-size: 2.5rem;
		}
		h3 {
			font-size: 2rem;
		}
		p {
			font-size: 1.1rem;
		}
	}
	@media (max-width: 530px) {
		h1 {
			font-size: 2.8rem;
		}
		h2 {
			font-size: 2.2rem;
		}
		h3 {
			font-size: 1.8rem;
		}
		p {
			font-size: 1rem;
		}
	}
	@media (max-width: 425px) {
		h1 {
			font-size: 2.2rem;
		}
		h2 {
			font-size: 1.8rem;
		}
		h3 {
			font-size: 1.5rem;
		}
		p {
			font-size: 0.9rem;
		}
	}
	@media (max-width: 375px) {
		h1 {
			font-size: 1.8rem;
		}
		h2 {
			font-size: 1.5rem;
		}
		h3 {
			font-size: 1.2rem;
		}
		p {
			font-size: 0.8rem;
		}
	}
	@media (max-width: 320px) {
		h1 {
			font-size: 1.5rem;
		}
		h2 {
			font-size: 1.2rem;
		}
		h3 {
			font-size: 1rem;
		}
		p {
			font-size: 0.7rem;
		}
	}

	p,
	a {
		font-family: "Space Mono", monospace;
		text-align: center;
	}

	a {
		color: white;
		text-decoration: underline;
	}
	a:hover {
		text-decoration: underline;
		color: rgb(var(--accent));
	}

	.bg {
		position: absolute;
		top: 0;
		left: 10px;
		width: 100%;
		height: 100%;
	}
	@keyframes blink {
		0% {
			opacity: 0;
		}
		50% {
			opacity: 0.6;
		}
		100% {
			opacity: 0;
		}
	}
	.stars-bg__star {
		opacity: 0;
		animation: blink 6s infinite;
	}
	.stars-bg__blink-2 {
		animation-delay: 1s;
	}
	.stars-bg__blink-3 {
		animation-delay: 2s;
	}
</style>
