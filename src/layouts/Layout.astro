---
import "@fontsource/space-mono";
import "@fontsource-variable/orbitron";

interface Props {
	title: string;
}

const { title } = Astro.props;

// Number of stars you want to add
const numStars = 175;
// Function to generate a random star
function generateStar() {
	// Generate a random position for the star
	const x = Math.random() * 545.39;
	const y = Math.random() * 1500;
	// Generate a random radius for the star
	const r = Math.random() * 1.5;
	// Generate a random animation delay for the star
	const delay = Math.random() * 6;

	return { x, y, r, delay };
}
// Generate an array of stars
const stars = Array.from({ length: numStars }, generateStar);
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta
			name="description"
			content="AstroHacks, a completely FREE coding competition for high school students of ANY skill level. We'll have prizes, food, and above all we aim to create a space for students to hang out, learn coding, build projects, and have fun!"
		/>
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body class="background-gradient">
		<div class="relative-container">
			<svg
				xmlns="http://www.w3.org/2000/svg"
				viewBox="0 0 545.39 1500"
				class="bg"
			>
				<defs>
					<style>
						.stars-bg__star {
							fill: white;
						}
					</style>
				</defs>
				{
					stars.map((star) => (
						<circle
							class="stars-bg__star"
							style={`animation-delay: ${star.delay}s; animation-duration: 6s; animation-iteration-count: infinite; animation-name: blink;`}
							cx={star.x}
							cy={star.y}
							r={star.r}
						/>
					))
				}
			</svg>
		</div>
		<slot />
	</body>
</html>
<style is:global>
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}
	html {
		font-family: system-ui, sans-serif;
		background: #13151a;
		background-size: 224px;
	}
	body {
		margin: 0;
		padding: 0;
		display: flex;
		justify-content: center;
		align-items: center;
		height: 100%;
	}
	h1,
	h2,
	h3,
	h4,
	h5,
	h6 {
		font-family: "Orbitron Variable", sans-serif;
		color: white;
		text-align: center;
	}

	h1 {
		font-size: 3.5rem;
	}
	h2 {
		font-size: 2.8rem;
	}
	h3 {
		font-size: 2rem;
	}

	p {
		font-size: 1.2rem;
	}

	/* breakpoints */
	@media (max-width: 600px) {
		h1 {
			font-size: 3rem;
		}
		h2 {
			font-size: 2.5rem;
		}
		h3 {
			font-size: 2rem;
		}
		p {
			font-size: 1.1rem;
		}
	}
	@media (max-width: 530px) {
		h1 {
			font-size: 2.8rem;
		}
		h2 {
			font-size: 2.2rem;
		}
		h3 {
			font-size: 1.8rem;
		}
		p {
			font-size: 1rem;
		}
	}
	@media (max-width: 425px) {
		h1 {
			font-size: 2.2rem;
		}
		h2 {
			font-size: 1.8rem;
		}
		h3 {
			font-size: 1.5rem;
		}
		p {
			font-size: 0.9rem;
		}
	}
	@media (max-width: 375px) {
		h1 {
			font-size: 1.8rem;
		}
		h2 {
			font-size: 1.5rem;
		}
		h3 {
			font-size: 1.2rem;
		}
		p {
			font-size: 0.8rem;
		}
	}
	@media (max-width: 320px) {
		h1 {
			font-size: 1.5rem;
		}
		h2 {
			font-size: 1.2rem;
		}
		h3 {
			font-size: 1rem;
		}
		p {
			font-size: 0.7rem;
		}
	}

	p,
	a,
	main {
		font-family: "Space Mono", monospace;
		text-align: center;
	}

	a {
		color: white;
		text-decoration: underline;
	}
	a:hover {
		text-decoration: underline;
		color: rgb(var(--accent));
	}

	.relative-container {
		position: relative;
		height: 100vh;
	}

	.bg {
		position: fixed;
		top: 0;
		width: 100%;
		z-index: 0;
	}

	@keyframes blink {
		0% {
			opacity: 0;
		}
		50% {
			opacity: 0.6;
		}
		100% {
			opacity: 0;
		}
	}

	.background-gradient {
		background: rgb(13, 16, 38);
		background: linear-gradient(
			180deg,
			rgba(13, 16, 38, 1) 0%,
			rgba(22, 24, 66, 1) 35%,
			rgba(26, 36, 85, 1) 90.5%,
			/* rgba(28, 43, 95, 1) 91%, */ rgba(35, 62, 125, 1) 100%
		);
	}
</style>

<script>
	// listen for scroll event and update the position of the stars
	// add parallax effect to the stars
	const stars = document.querySelector(".bg") as HTMLElement;
	let animationFrameId: number;

	if (stars) {
		animationFrameId = requestAnimationFrame(() => {
			const scrollY = window.scrollY;
			const dampenedScrollY = scrollY * 0.01;
			const translateY = 50 + -dampenedScrollY;
			stars.style.transform = `translateY(${translateY}px)`;
		});
	}

	// listen for scroll event and update the position of the stars
	window.addEventListener("scroll", () => {
		if (stars) {
			animationFrameId = requestAnimationFrame(() => {
				const scrollY = window.scrollY;
				const dampenedScrollY = scrollY * 0.01;
				const translateY = 50 + -dampenedScrollY;
				stars.style.transform = `translateY(${translateY}px)`;
			});
		}
	});
</script>
